package craigslistposterform;
import java.nio.file.*;
import java.io.*;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.JavascriptExecutor;
import java.util.Timer;
import java.util.TimerTask;
import java.text.SimpleDateFormat;  
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.ListIterator;
import org.openqa.selenium.io.FileHandler;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Alan
 */
public class NewJFrame extends javax.swing.JFrame {
    
    public static int counter;
    public static String consoleOutput = "";

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        System.setProperty("webdriver.chrome.driver", "." + System.getProperty("file.separator") + "chromedriver.exe");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupEmail = new javax.swing.ButtonGroup();
        buttonGroupLicense = new javax.swing.ButtonGroup();
        jDialogSchedule = new javax.swing.JDialog();
        jLabelSchedule = new javax.swing.JLabel();
        jSpinnerSchedule = new javax.swing.JSpinner();
        jButtonConfirm = new javax.swing.JButton();
        jFrameConsole = new javax.swing.JFrame();
        jScrollPaneConsole = new javax.swing.JScrollPane();
        jTextAreaConsole = new javax.swing.JTextArea();
        jFileChooserImages = new javax.swing.JFileChooser();
        jScrollPaneProgram = new javax.swing.JScrollPane();
        jPanelProgram = new javax.swing.JPanel();
        jLabelUsername = new javax.swing.JLabel();
        jTextFieldUsername = new javax.swing.JTextField();
        jLabelPassword = new javax.swing.JLabel();
        jTextFieldPassword = new javax.swing.JTextField();
        jLabelArea = new javax.swing.JLabel();
        jComboBoxArea = new javax.swing.JComboBox<>();
        jLabelLocation = new javax.swing.JLabel();
        jComboBoxLocation = new javax.swing.JComboBox<>();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox<>();
        jLabelCategory = new javax.swing.JLabel();
        jComboBoxCategory = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jLabelPostingTitle = new javax.swing.JLabel();
        jTextFieldPostingTitle = new javax.swing.JTextField();
        jLabelSpecificLocation = new javax.swing.JLabel();
        jTextFieldSpecificLocation = new javax.swing.JTextField();
        jLabelPostalCode = new javax.swing.JLabel();
        jTextFieldPostalCode = new javax.swing.JTextField();
        jLabelPostingBody = new javax.swing.JLabel();
        jScrollPanePostingBody = new javax.swing.JScrollPane();
        jTextAreaPostingBody = new javax.swing.JTextArea();
        jSeparator2 = new javax.swing.JSeparator();
        jLabelPostingDetails = new javax.swing.JLabel();
        jLabelRent = new javax.swing.JLabel();
        jTextFieldRent = new javax.swing.JTextField();
        jLabelSqft = new javax.swing.JLabel();
        jTextFieldSqft = new javax.swing.JTextField();
        jButtonImages = new javax.swing.JButton();
        jLabelNumberOfImages = new javax.swing.JLabel();
        jLabelHousingType = new javax.swing.JLabel();
        jComboBoxHousingType = new javax.swing.JComboBox<>();
        jLabelLaundry = new javax.swing.JLabel();
        jComboBoxLaundry = new javax.swing.JComboBox<>();
        jLabelParking = new javax.swing.JLabel();
        jComboBoxParking = new javax.swing.JComboBox<>();
        jLabelBedrooms = new javax.swing.JLabel();
        jComboBoxBedrooms = new javax.swing.JComboBox<>();
        jLabelBathrooms = new javax.swing.JLabel();
        jComboBoxBathrooms = new javax.swing.JComboBox<>();
        jCheckBoxCats = new javax.swing.JCheckBox();
        jCheckBoxDogs = new javax.swing.JCheckBox();
        jCheckBoxFurnished = new javax.swing.JCheckBox();
        jCheckBoxNoSmoking = new javax.swing.JCheckBox();
        jCheckBoxWheelchair = new javax.swing.JCheckBox();
        jLabelAvailableOn = new javax.swing.JLabel();
        jLabelMonth = new javax.swing.JLabel();
        jComboBoxMonth = new javax.swing.JComboBox<>();
        jLabelDay = new javax.swing.JLabel();
        jComboBoxDay = new javax.swing.JComboBox<>();
        jLabelYear = new javax.swing.JLabel();
        jTextFieldYear = new javax.swing.JTextField();
        jLabelPrivateRoom = new javax.swing.JLabel();
        jComboBoxPrivateRoom = new javax.swing.JComboBox<>();
        jLabelPrivateBath = new javax.swing.JLabel();
        jComboBoxPrivateBath = new javax.swing.JComboBox<>();
        jRadioButtonUnlicensed = new javax.swing.JRadioButton();
        jRadioButtonLicensed = new javax.swing.JRadioButton();
        jLabelLicensureInformation = new javax.swing.JLabel();
        jTextFieldLicensureInformation = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        jLabelContactInfo = new javax.swing.JLabel();
        jLabelEmailPrivacyOptions = new javax.swing.JLabel();
        jRadioButton1CLMailRelay = new javax.swing.JRadioButton();
        jRadioButton2ShowMyReal = new javax.swing.JRadioButton();
        jRadioButton3NoReplies = new javax.swing.JRadioButton();
        jLabelUsersCanAlsoContactMe = new javax.swing.JLabel();
        jCheckBoxByPhone = new javax.swing.JCheckBox();
        jCheckBoxByText = new javax.swing.JCheckBox();
        jLabelPhoneNumber = new javax.swing.JLabel();
        jTextFieldPhoneNumber = new javax.swing.JTextField();
        jLabelExtension = new javax.swing.JLabel();
        jTextFieldExtension = new javax.swing.JTextField();
        jLabelContactName = new javax.swing.JLabel();
        jTextFieldContactName = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        jLabelLocationInfo = new javax.swing.JLabel();
        jLabelStreet = new javax.swing.JLabel();
        jTextFieldStreet = new javax.swing.JTextField();
        jLabelCrossStreet = new javax.swing.JLabel();
        jTextFieldCrossStreet = new javax.swing.JTextField();
        jLabelCity = new javax.swing.JLabel();
        jTextFieldCity = new javax.swing.JTextField();
        jSeparator5 = new javax.swing.JSeparator();
        jCheckBoxOkForOthers = new javax.swing.JCheckBox();
        jButtonGenerate = new javax.swing.JButton();
        jLabelResult = new javax.swing.JLabel();
        jButtonSchedule = new javax.swing.JButton();

        jDialogSchedule.setTitle("Schedule");
        jDialogSchedule.setAlwaysOnTop(true);
        jDialogSchedule.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jDialogSchedule.setFocusCycleRoot(false);
        jDialogSchedule.setMinimumSize(new java.awt.Dimension(480, 80));

        jLabelSchedule.setText("Please choose the hourly interval between each posting:");
        jLabelSchedule.setToolTipText("");

        jSpinnerSchedule.setModel(new javax.swing.SpinnerNumberModel(1, 1, 24, 1));

        jButtonConfirm.setText("Confirm");
        jButtonConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialogScheduleLayout = new javax.swing.GroupLayout(jDialogSchedule.getContentPane());
        jDialogSchedule.getContentPane().setLayout(jDialogScheduleLayout);
        jDialogScheduleLayout.setHorizontalGroup(
            jDialogScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogScheduleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelSchedule)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinnerSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonConfirm)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialogScheduleLayout.setVerticalGroup(
            jDialogScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogScheduleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialogScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSchedule)
                    .addComponent(jSpinnerSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonConfirm))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jFrameConsole.setTitle("Console");
        jFrameConsole.setMinimumSize(new java.awt.Dimension(400, 300));

        jTextAreaConsole.setColumns(20);
        jTextAreaConsole.setRows(5);
        jTextAreaConsole.setEnabled(false);
        jScrollPaneConsole.setViewportView(jTextAreaConsole);

        javax.swing.GroupLayout jFrameConsoleLayout = new javax.swing.GroupLayout(jFrameConsole.getContentPane());
        jFrameConsole.getContentPane().setLayout(jFrameConsoleLayout);
        jFrameConsoleLayout.setHorizontalGroup(
            jFrameConsoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameConsoleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneConsole, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        jFrameConsoleLayout.setVerticalGroup(
            jFrameConsoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameConsoleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneConsole, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );

        jFileChooserImages.setCurrentDirectory(new java.io.File("C:\\Users\\Alan\\Desktop"));
        jFileChooserImages.setDialogTitle("");
        jFileChooserImages.setMinimumSize(new java.awt.Dimension(500, 400));
        jFileChooserImages.setMultiSelectionEnabled(true);
        jFileChooserImages.setPreferredSize(new java.awt.Dimension(500, 400));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Supported Image Types: *.jpg, *.png, *.gif", "jpg", "png", "gif");
        jFileChooserImages.addChoosableFileFilter(filter);
        jFileChooserImages.setFileFilter(filter);
        jFileChooserImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooserImagesActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Craigslist Autoposter File Generator");

        jLabelUsername.setText("Username");

        jTextFieldUsername.setToolTipText("");

        jLabelPassword.setText("Password");

        jTextFieldPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPasswordActionPerformed(evt);
            }
        });

        jLabelArea.setText("Area");
        jLabelArea.setToolTipText("");

        jComboBoxArea.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "vancouver" }));

        jLabelLocation.setText("Location");

        jComboBoxLocation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "city of vancouver", "north shore", "burnaby/newwest", "delta/surrey/langley", "tricities/pitt/maple", "richmond" }));
        jComboBoxLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLocationActionPerformed(evt);
            }
        });

        jLabelType.setText("Type");

        jComboBoxType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "housing offered" }));
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jLabelCategory.setText("Category");

        jComboBoxCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "rooms & shares", "apts/housing for rent", "housing swap", "office & commercial", "parking & storage", "real estate - by broker", "real estate - by owner", "sublets & temporary", "vacation rentals" }));
        jComboBoxCategory.setToolTipText("");
        jComboBoxCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCategoryActionPerformed(evt);
            }
        });

        jLabelPostingTitle.setForeground(new java.awt.Color(0, 204, 51));
        jLabelPostingTitle.setText("posting title");
        jLabelPostingTitle.setToolTipText("");

        jTextFieldPostingTitle.setToolTipText("");

        jLabelSpecificLocation.setText("specific location");

        jLabelPostalCode.setForeground(new java.awt.Color(0, 204, 51));
        jLabelPostalCode.setText("postal code");

        jTextFieldPostalCode.setToolTipText("");
        jTextFieldPostalCode.setName(""); // NOI18N

        jLabelPostingBody.setForeground(new java.awt.Color(0, 204, 51));
        jLabelPostingBody.setText("posting body");

        jTextAreaPostingBody.setColumns(20);
        jTextAreaPostingBody.setRows(5);
        jScrollPanePostingBody.setViewportView(jTextAreaPostingBody);

        jLabelPostingDetails.setText("posting details");

        jLabelRent.setForeground(new java.awt.Color(0, 204, 51));
        jLabelRent.setText("rent");
        jLabelRent.setToolTipText("");

        jTextFieldRent.setToolTipText("");
        jTextFieldRent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldRentActionPerformed(evt);
            }
        });

        jLabelSqft.setText("sqft");

        jTextFieldSqft.setToolTipText("");

        jButtonImages.setText("Images");
        jButtonImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImagesActionPerformed(evt);
            }
        });

        jLabelNumberOfImages.setText("# Images");

        jLabelHousingType.setText("housing type");

        jComboBoxHousingType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "apartment", "condo", "cottage/cabin", "duplex", "flat", "house", "in-law", "loft", "townhouse", "manufactured", "assited living", "land" }));

        jLabelLaundry.setText("laundry");

        jComboBoxLaundry.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "w/d in unit", "laundry in bldg", "laundry on site", "w/d hookups", "no laundry on site" }));

        jLabelParking.setText("parking");

        jComboBoxParking.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "carport", "attached garage", "detached garage", "off-street parking", "street parking", "valet parking", "no parking" }));

        jLabelBedrooms.setText("bedrooms");

        jComboBoxBedrooms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8" }));
        jComboBoxBedrooms.setEnabled(false);

        jLabelBathrooms.setText("bathrooms");

        jComboBoxBathrooms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "shared", "split", "1", "1.5", "2", "2.5", "3", "3.5", "4", "4.5", "5", "5.5", "6", "6.5", "7", "7.5", "8", "8.5", "9+" }));
        jComboBoxBathrooms.setEnabled(false);

        jCheckBoxCats.setText("cats ok");

        jCheckBoxDogs.setText("dogs ok");

        jCheckBoxFurnished.setText("furnished");

        jCheckBoxNoSmoking.setText("no smoking");

        jCheckBoxWheelchair.setText("wheelchair accessible");

        jLabelAvailableOn.setText("available on");

        jLabelMonth.setText("Month");

        jComboBoxMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        jComboBoxMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxMonthActionPerformed(evt);
            }
        });

        jLabelDay.setText("Day");

        jComboBoxDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jLabelYear.setText("Year");

        jLabelPrivateRoom.setText("private room");

        jComboBoxPrivateRoom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "room not private", "private room" }));

        jLabelPrivateBath.setText("private bath");

        jComboBoxPrivateBath.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "no private bath", "private bath" }));
        jComboBoxPrivateBath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPrivateBathActionPerformed(evt);
            }
        });

        buttonGroupLicense.add(jRadioButtonUnlicensed);
        jRadioButtonUnlicensed.setSelected(true);
        jRadioButtonUnlicensed.setText("unlicensed");
        jRadioButtonUnlicensed.setEnabled(false);

        buttonGroupLicense.add(jRadioButtonLicensed);
        jRadioButtonLicensed.setText("licensed");
        jRadioButtonLicensed.setEnabled(false);

        jLabelLicensureInformation.setText("licensure information");

        jTextFieldLicensureInformation.setEnabled(false);

        jLabelContactInfo.setText("contact info");

        jLabelEmailPrivacyOptions.setText("email privacy options");

        buttonGroupEmail.add(jRadioButton1CLMailRelay);
        jRadioButton1CLMailRelay.setSelected(true);
        jRadioButton1CLMailRelay.setText("CL mail relay (recommended)");

        buttonGroupEmail.add(jRadioButton2ShowMyReal);
        jRadioButton2ShowMyReal.setText("show my real email address");

        buttonGroupEmail.add(jRadioButton3NoReplies);
        jRadioButton3NoReplies.setText("no replies to this email");

        jLabelUsersCanAlsoContactMe.setText("users can also contact me:");

        jCheckBoxByPhone.setText("by phone");

        jCheckBoxByText.setText("by text");

        jLabelPhoneNumber.setText("phone number");

        jLabelExtension.setText("extension");

        jLabelContactName.setText("contact name");

        jLabelLocationInfo.setText("location info");

        jLabelStreet.setText("street");

        jLabelCrossStreet.setText("cross street");

        jLabelCity.setText("city");

        jTextFieldCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCityActionPerformed(evt);
            }
        });

        jCheckBoxOkForOthers.setText("ok for others to contact you about other services, products or commercial interests");
        jCheckBoxOkForOthers.setToolTipText("");

        jButtonGenerate.setText("Generate");
        jButtonGenerate.setToolTipText("");
        jButtonGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerateActionPerformed(evt);
            }
        });

        jLabelResult.setText("Result");
        jLabelResult.setToolTipText("");

        jButtonSchedule.setText("Schedule");
        jButtonSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonScheduleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelProgramLayout = new javax.swing.GroupLayout(jPanelProgram);
        jPanelProgram.setLayout(jPanelProgramLayout);
        jPanelProgramLayout.setHorizontalGroup(
            jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProgramLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jCheckBoxOkForOthers, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelProgramLayout.createSequentialGroup()
                            .addComponent(jLabelPostingTitle)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextFieldPostingTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabelSpecificLocation)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextFieldSpecificLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabelPostalCode)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextFieldPostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabelPostingBody, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelProgramLayout.createSequentialGroup()
                            .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelRent)
                                    .addComponent(jTextFieldSqft)
                                    .addComponent(jTextFieldRent)
                                    .addComponent(jLabelPostingDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelSqft)
                                    .addComponent(jButtonImages, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jLabelNumberOfImages))
                            .addGap(63, 63, 63)
                            .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabelBathrooms)
                                .addComponent(jLabelBedrooms)
                                .addComponent(jLabelParking)
                                .addComponent(jLabelLaundry)
                                .addComponent(jComboBoxHousingType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelHousingType)
                                .addComponent(jComboBoxLaundry, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBoxParking, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBoxBedrooms, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBoxBathrooms, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanelProgramLayout.createSequentialGroup()
                                    .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jCheckBoxDogs)
                                        .addComponent(jCheckBoxFurnished)
                                        .addComponent(jCheckBoxCats)
                                        .addComponent(jCheckBoxNoSmoking)
                                        .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabelPrivateRoom)
                                            .addComponent(jLabelPrivateBath)
                                            .addComponent(jComboBoxPrivateRoom, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jComboBoxPrivateBath, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanelProgramLayout.createSequentialGroup()
                                            .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanelProgramLayout.createSequentialGroup()
                                                    .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabelMonth)
                                                        .addComponent(jLabelDay)
                                                        .addComponent(jLabelYear))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jComboBoxMonth, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabelAvailableOn)
                                                        .addComponent(jComboBoxDay, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jTextFieldYear, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addComponent(jRadioButtonUnlicensed)
                                                .addComponent(jRadioButtonLicensed)
                                                .addComponent(jLabelLicensureInformation))
                                            .addGap(14, 14, 14))
                                        .addComponent(jTextFieldLicensureInformation)))
                                .addGroup(jPanelProgramLayout.createSequentialGroup()
                                    .addComponent(jCheckBoxWheelchair)
                                    .addGap(0, 0, Short.MAX_VALUE))))
                        .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabelContactInfo, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabelLocationInfo, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelProgramLayout.createSequentialGroup()
                            .addComponent(jLabelStreet)
                            .addGap(166, 166, 166)
                            .addComponent(jLabelCrossStreet)
                            .addGap(83, 83, 83)
                            .addComponent(jLabelCity))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelProgramLayout.createSequentialGroup()
                            .addComponent(jTextFieldStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextFieldCrossStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextFieldCity, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelProgramLayout.createSequentialGroup()
                            .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanelProgramLayout.createSequentialGroup()
                                    .addComponent(jLabelUsername)
                                    .addGap(18, 18, 18)
                                    .addComponent(jTextFieldUsername))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelProgramLayout.createSequentialGroup()
                                    .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabelPassword)
                                        .addComponent(jLabelArea))
                                    .addGap(20, 20, 20)
                                    .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jTextFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jComboBoxArea, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelCategory)
                                .addComponent(jLabelType)
                                .addComponent(jLabelLocation))
                            .addGap(23, 23, 23)
                            .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jComboBoxCategory, 0, 1, Short.MAX_VALUE)
                                .addComponent(jComboBoxType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBoxLocation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPanePostingBody, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGroup(jPanelProgramLayout.createSequentialGroup()
                        .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator5)
                            .addComponent(jSeparator4)
                            .addGroup(jPanelProgramLayout.createSequentialGroup()
                                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelEmailPrivacyOptions)
                                    .addComponent(jRadioButton1CLMailRelay)
                                    .addComponent(jRadioButton2ShowMyReal)
                                    .addComponent(jRadioButton3NoReplies))
                                .addGap(31, 31, 31)
                                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelPhoneNumber)
                                    .addComponent(jLabelUsersCanAlsoContactMe)
                                    .addGroup(jPanelProgramLayout.createSequentialGroup()
                                        .addComponent(jCheckBoxByPhone)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jCheckBoxByText))
                                    .addComponent(jTextFieldPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelProgramLayout.createSequentialGroup()
                                        .addComponent(jLabelExtension)
                                        .addGap(34, 34, 34)
                                        .addComponent(jLabelContactName))
                                    .addGroup(jPanelProgramLayout.createSequentialGroup()
                                        .addComponent(jTextFieldExtension, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextFieldContactName, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanelProgramLayout.createSequentialGroup()
                                .addComponent(jButtonGenerate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelResult)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonSchedule)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelProgramLayout.setVerticalGroup(
            jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProgramLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelUsername)
                    .addComponent(jLabelLocation)
                    .addComponent(jComboBoxLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelType)
                    .addComponent(jLabelPassword)
                    .addComponent(jTextFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCategory)
                    .addComponent(jComboBoxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelArea))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPostingTitle)
                    .addComponent(jTextFieldPostingTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSpecificLocation)
                    .addComponent(jTextFieldSpecificLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPostalCode)
                    .addComponent(jTextFieldPostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelPostingBody)
                .addGap(4, 4, 4)
                .addComponent(jScrollPanePostingBody, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelProgramLayout.createSequentialGroup()
                        .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanelProgramLayout.createSequentialGroup()
                                .addComponent(jLabelPostingDetails)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelRent)
                                    .addComponent(jLabelHousingType))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldRent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxHousingType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelSqft)
                                    .addComponent(jLabelLaundry))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldSqft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxLaundry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanelProgramLayout.createSequentialGroup()
                                .addComponent(jCheckBoxCats)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxDogs)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxFurnished)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxNoSmoking)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelParking)
                            .addComponent(jCheckBoxWheelchair)))
                    .addGroup(jPanelProgramLayout.createSequentialGroup()
                        .addComponent(jLabelAvailableOn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelMonth))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDay))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelYear))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxParking, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonUnlicensed)
                    .addComponent(jButtonImages))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelBedrooms)
                    .addComponent(jLabelPrivateRoom)
                    .addComponent(jRadioButtonLicensed)
                    .addComponent(jLabelNumberOfImages))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxBedrooms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxPrivateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelLicensureInformation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelBathrooms)
                    .addComponent(jLabelPrivateBath)
                    .addComponent(jTextFieldLicensureInformation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxBathrooms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxPrivateBath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelContactInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelEmailPrivacyOptions)
                    .addComponent(jLabelUsersCanAlsoContactMe))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1CLMailRelay)
                    .addComponent(jCheckBoxByPhone)
                    .addComponent(jCheckBoxByText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton2ShowMyReal)
                    .addComponent(jLabelPhoneNumber)
                    .addComponent(jLabelExtension)
                    .addComponent(jLabelContactName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton3NoReplies)
                    .addComponent(jTextFieldPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldExtension, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldContactName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelLocationInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelStreet)
                    .addComponent(jLabelCrossStreet)
                    .addComponent(jLabelCity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldStreet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldCrossStreet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxOkForOthers)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGenerate)
                    .addComponent(jLabelResult)
                    .addComponent(jButtonSchedule))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jLabelNumberOfImages.setVisible(false);
        jLabelResult.setVisible(false);

        jScrollPaneProgram.setViewportView(jPanelProgram);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPaneProgram)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneProgram)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void Sleep(int seconds) {
        try {
            Thread.sleep(seconds * 1000); 
        } catch (InterruptedException ex) {
            return;
        }
    }
    
    public class ScheduledTask extends TimerTask {
        public void run() {
            
            SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");  
            Date date = new Date();  
            
            consoleOutput += "The time is now: " + formatter.format(date) + System.lineSeparator();
            jTextAreaConsole.setText(consoleOutput);
            
            int numberOfFiles = 0; 
            while (new File("." + System.getProperty("file.separator") + "Information" + System.getProperty("file.separator") + Integer.toString(numberOfFiles + 1) + ".txt").exists()) {
                numberOfFiles++;
            }
       
            consoleOutput += "Identified " + Integer.toString(numberOfFiles) + " files to schedule\n";
            
            jTextAreaConsole.setText(consoleOutput);

            if (numberOfFiles == 0) {
                consoleOutput += "No files to schedule for posting!\n";
                jTextAreaConsole.setText(consoleOutput);
                return;
            }
            
            String dataFile;
            
            for (int i = 1; i <= numberOfFiles; i++) {
                
                try {
                    dataFile = new String(Files.readAllBytes(Paths.get("." + System.getProperty("file.separator") + "Information" + System.getProperty("file.separator") + i + ".txt")));
                } catch (IOException ex) {
                    consoleOutput +="Something went wrong!\n";
                    jTextAreaConsole.setText(consoleOutput);
                    return;
                }
                
                consoleOutput += "Beginning to post file " + Integer.toString(i) + System.lineSeparator();
                jTextAreaConsole.setText(consoleOutput);
                
                List<String> dataParsed = Arrays.asList(dataFile.split(System.lineSeparator()));
                
                List<String> data = new ArrayList<>();
                
                dataParsed.stream().forEach((String s) -> { 
                    data.add(s.split("= ")[1]);
                });
                
                ListIterator<String> dataIterator = data.listIterator();
                
                WebDriver driver = new ChromeDriver();
                
                String url = "https://accounts.craigslist.org/login/home";
                
                driver.get(url);
                
                WebElement username = driver.findElement(By.id("inputEmailHandle"));
                username.clear();
                username.sendKeys(dataIterator.next());
                
                WebElement password = driver.findElement(By.id(("inputPassword")));
                password.clear();
                password.sendKeys(dataIterator.next());
                password.submit();
                
                Sleep(1);
                
                new Select(driver.findElement(By.name("areaabb"))).selectByValue(dataIterator.next());
                driver.findElement(By.xpath("//button[@value='go']")).submit();
                
                Sleep(1);
                
                for (int j = dataIterator.nextIndex(); j < 6; j = dataIterator.nextIndex()) {
                    driver.findElement(By.cssSelector("input[value='" + dataIterator.next() + "']")).click();
                    Sleep(1);
                }
                
                int category = Integer.parseInt(data.get(5));
                
                if (category == 144) {
                    driver.findElement(By.cssSelector("button[class='pickbutton']")).click();
                    Sleep(1);
                }
                
                WebElement title = driver.findElement(By.name("PostingTitle"));
                title.clear();
                title.sendKeys(dataIterator.next());
                
                String specificLocation = dataIterator.next();
                
                if (fillInformation(specificLocation)) {
                    WebElement specificLocationElement = driver.findElement(By.name("GeographicArea"));
                    specificLocationElement.clear();
                    specificLocationElement.sendKeys(specificLocation);
                }
                
                WebElement postalCode = driver.findElement(By.name("postal"));
                postalCode.clear();
                postalCode.sendKeys(dataIterator.next());
                
                WebElement postingBody = driver.findElement(By.name("PostingBody"));
                postingBody.clear();
                postingBody.sendKeys(dataIterator.next().replace("\\n", "\n"));
                
                String privacy = dataIterator.next();
                
                if (fillInformation(privacy)) {
                    driver.findElement(By.cssSelector("input[value='" + privacy + "']")).click();
                }
                
                if (fillInformation(dataIterator.next())) {
                    driver.findElement(By.name("contact_phone_ok")).click();
                }
                
                if (fillInformation(dataIterator.next())) {
                    driver.findElement(By.name("contact_text_ok")).click();
                }
                
                String phone = dataIterator.next();
                
                if (fillInformation(phone)) {
                    WebElement phoneElement = driver.findElement(By.name("contact_phone"));
                    phoneElement.clear();
                    phoneElement.sendKeys(phone);
                }
                
                String extension = dataIterator.next();
                
                if (fillInformation(extension)) {
                    WebElement extensionElement = driver.findElement(By.name("contact_phone_extension"));
                    extensionElement.clear();
                    extensionElement.sendKeys(extension);
                }
                
                String name = dataIterator.next();
                
                if (fillInformation(name)) {
                    WebElement nameElement = driver.findElement(By.name("contact_name"));
                    nameElement.clear();
                    nameElement.sendKeys(name);
                }
                
                String xstreet0 = dataIterator.next();
                
                if (fillInformation(xstreet0)) {
                    WebElement xstreet0Element = driver.findElement(By.name("xstreet0"));
                    xstreet0Element.clear();
                    xstreet0Element.sendKeys(xstreet0);
                }
                
                String xstreet1 = dataIterator.next();
                
                if (fillInformation(xstreet1)) {
                    WebElement xstreet1Element = driver.findElement(By.name("xstreet1"));
                    xstreet1Element.clear();
                    xstreet1Element.sendKeys(xstreet1);
                }
                
                String city = dataIterator.next();
                
                if (fillInformation(city)) {
                    WebElement cityElement = driver.findElement(By.name("city"));
                    cityElement.clear();
                    cityElement.sendKeys(city);
                }
                
                // Deprecated, but added in case map options return
                
                String region = dataIterator.next();
                
                if (fillInformation(region)) {
                    WebElement regionElement = driver.findElement(By.name("region"));
                    regionElement.clear();
                    regionElement.sendKeys(region);
                }
                
                if (fillInformation(dataIterator.next())) {
                    driver.findElement(By.name("contact_ok")).click();
                }
                
                // Begin specific category information
                
                if (category != 65) {
                    WebElement rent = driver.findElement(By.name("price"));
                    rent.clear();
                    rent.sendKeys(dataIterator.next());
                }
                
                String ft = dataIterator.next();
                
                if (fillInformation(ft)) {
                    WebElement ftElement = driver.findElement(By.name("Sqft"));
                    ftElement.clear();
                    ftElement.sendKeys(ft);
                }
                
                if (category != 40 && category != 41) {
                    
                    if (category == 18 || category == 39) {
                        visibleCheat(driver, "private_room", dataIterator.next());
                        visibleCheat(driver, "private_bath", dataIterator.next());
                    }
                    
                    visibleCheat(driver, "housing_type", dataIterator.next());
                    visibleCheat(driver, "laundry", dataIterator.next());
                    visibleCheat(driver, "parking", dataIterator.next());
                    
                    if (category != 18) {
                        visibleCheat(driver, "Bedrooms", dataIterator.next());
                        visibleCheat(driver, "bathrooms", dataIterator.next());
                    }
                    
                    if (category != 143 && category != 144) {
                        if (fillInformation(dataIterator.next())) {
                            driver.findElement(By.name("pets_cat")).click();
                        }
                        if (fillInformation(dataIterator.next())) {
                            driver.findElement(By.name("pets_dog")).click();
                        }
                    }
                    
                    if (fillInformation(dataIterator.next())) {
                        driver.findElement(By.name("is_furnished")).click();
                    }
                    
                    if (fillInformation(dataIterator.next())) {
                        driver.findElement(By.name("no_smoking")).click();
                    }
                    
                    if (fillInformation(dataIterator.next())) {
                        driver.findElement(By.name("wheelchaccess")).click();
                    }
                    
                    String month = dataIterator.next();
                    
                    int doDate = 0;
                    
                    if (fillInformation(month)) {
                        if (month.equals("1") || month.equals("2") || month.equals("3") || month.equals("4") || month.equals("5") || month.equals("6") || month.equals("7") || month.equals("8") || month.equals("9")) {
                            month = "0" + month;
                        }
                        doDate++;
                    }
                    
                    String day = dataIterator.next();
                    
                    if (fillInformation(day)) {
                        if (day.equals("1") || day.equals("2") || day.equals("3") || day.equals("4") || day.equals("5") || day.equals("6") || day.equals("7") || day.equals("8") || day.equals("9")) {
                            day = "0" + day;
                        }
                        doDate++;
                    }
                    
                    String year = dataIterator.next();
                    
                    if (fillInformation(year)) {
                        doDate++;
                    }
                    
                    if (doDate == 3) {
                        WebElement availableDate = driver.findElement(By.name("moveinDate"));
                        ((JavascriptExecutor)driver).executeScript("document.getElementsByName('moveinDate')[0].style.display='inline-block';");
                        availableDate.clear();
                        availableDate.sendKeys(year + "-" + month + "-" + day);
                    }
                    
                    if (category == 144) {
                        if (fillInformation(dataIterator.next())) {
                            driver.findElement(By.xpath("//input[@name='has_license' and @value='1']")).click();
                            WebElement license = driver.findElement(By.name("license_info"));
                            license.clear();
                            license.sendKeys(dataIterator.next());
                        }
                    }
                    
                }
                
                driver.findElement(By.cssSelector("button[class='go big-button submit-button']")).submit();
                Sleep(1);
                
                try {
                    driver.findElement(By.cssSelector("button[class='continue bigbutton']")).submit();
                    Sleep(1);
                } catch (Exception ex) {
                    continue;
                }
                
                // Upload images
                
                WebElement images = driver.findElement(By.cssSelector("input[type='file']"));
                File file;
                
                for (int j = 1; j < 25; j++) {
                    
                    String path = "." + System.getProperty("file.separator") + "Images" + System.getProperty("file.separator") + Integer.toString(i) + "-" + Integer.toString(j);
                    
                    if (new File(path + ".jpg").isFile()) {
                        file = new File(path + ".jpg");
                    }
                    else if (new File(path + ".png").isFile()) {
                        file = new File(path + ".png");
                    }
                    else if (new File(path + ".gif").isFile()) {
                        file = new File(path + ".gif");
                    }
                    else {
                        break;
                    }
                    
                    images.sendKeys(file.getAbsolutePath());
                    Sleep(2);
                    
                }
                
                Sleep(3);
                
                driver.findElement(By.cssSelector("button[class='done bigbutton']")).submit();
                
                Sleep(1);
                
                driver.findElement(By.cssSelector("button[class='button']")).submit();
                
                Sleep(1);
                
                driver.close();
                
                consoleOutput += "Finished posting #" + Integer.toString(i) + System.lineSeparator();
                jTextAreaConsole.setText(consoleOutput);
                
            }
            
            consoleOutput += "Finished postings at: " + formatter.format(date) + System.lineSeparator();
            jTextAreaConsole.setText(consoleOutput);
            
        }
    }
    
    public void visibleCheat(WebDriver driver, String name, String value) {
        ((JavascriptExecutor)driver).executeScript("document.getElementsByName('" + name + "')[0].style.display='inline-block';");
        new Select(driver.findElement(By.name(name))).selectByValue(value);
    }
    
    public boolean fillInformation(String s) {
        if (s.equals("X")) {
            return false;
        }
        else {
            return true;
        }
    }
    
    private void jButtonConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmActionPerformed
        // TODO add your handling code here:
        
        int interval = (int) jSpinnerSchedule.getValue();
        
        consoleOutput += "Scheduled interval: " + jSpinnerSchedule.getValue().toString() + " hours\n";
        jTextAreaConsole.setText(consoleOutput);
        
        jDialogSchedule.setVisible(false);
        jButtonSchedule.setEnabled(false);
        
        jFrameConsole.setVisible(true);

        Timer timer = new Timer();
        
        timer.schedule(new ScheduledTask(), 0, interval * 1000 * 60 * 60);
        
    }//GEN-LAST:event_jButtonConfirmActionPerformed

    private void jFileChooserImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooserImagesActionPerformed
        // TODO add your handling code here:
        jLabelNumberOfImages.setText(Integer.toString(jFileChooserImages.getSelectedFiles().length) + " Images");
        jLabelNumberOfImages.setVisible(true);
    }//GEN-LAST:event_jFileChooserImagesActionPerformed

    private void jButtonScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonScheduleActionPerformed
        // TODO add your handling code here:
        jDialogSchedule.setVisible(true);
    }//GEN-LAST:event_jButtonScheduleActionPerformed

    private void jButtonGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerateActionPerformed
        // TODO add your handling code here:

        String text = "craigslist_username = " + jTextFieldUsername.getText() + System.lineSeparator() +
        "craigslist_password = " + jTextFieldPassword.getText() + System.lineSeparator();

        String area;

        if (jComboBoxArea.getSelectedIndex() == 0) {
            area = "van";
        }

        else {
            area = "van";
        }

        text += "new_posting_in = " + area + System.lineSeparator() +
        "location_that_fits_best = " + Integer.toString(jComboBoxLocation.getSelectedIndex() + 1) + System.lineSeparator();

        String type_of_posting;

        switch (jComboBoxType.getSelectedIndex()) {
            case 0:  type_of_posting = "ho";
            break;
            default: type_of_posting = "ho";
            break;
        }

        text += "type_of_posting = " + type_of_posting + System.lineSeparator();

        String category;

        if (jComboBoxType.getSelectedIndex() == 0) {
            switch (jComboBoxCategory.getSelectedIndex()) {
                case 0: category = "18";
                break;
                case 1: category = "1";
                break;
                case 2: category = "65";
                break;
                case 3: category = "40";
                break;
                case 4: category = "41";
                break;
                case 5: category = "144";
                break;
                case 6: category = "143";
                break;
                case 7: category = "39";
                break;
                case 8: category = "99";
                break;
                default: category = "18";
                break;
            }
        }

        else {
            category = "";
        }

        text += "category = " + category + System.lineSeparator() +
        "posting_title = " + jTextFieldPostingTitle.getText() + System.lineSeparator() +
        "specific_location = " + jTextFieldSpecificLocation.getText() + System.lineSeparator() +
        "postal_code = " + jTextFieldPostalCode.getText() + System.lineSeparator() +
        "posting_body = " + jTextAreaPostingBody.getText().replace("\n", "\\n") + System.lineSeparator();

        String privacy;

        if (jRadioButton1CLMailRelay.isSelected()) {
            privacy = "C";
        }

        else if (jRadioButton2ShowMyReal.isSelected()) {
            privacy = "P";
        }

        else if (jRadioButton3NoReplies.isSelected()) {
            privacy = "A";
        }

        else {
            privacy = "C";
        }

        text += "privacy = " + privacy + System.lineSeparator();

        String contact_phone_ok;

        if (jCheckBoxByPhone.isSelected()) {
            contact_phone_ok = "1";
        }

        else {
            contact_phone_ok = "X";
        }

        text += "contact_phone_ok = " + contact_phone_ok + System.lineSeparator();

        String contact_text_ok;

        if (jCheckBoxByText.isSelected()) {
            contact_text_ok = "1";
        }

        else {
            contact_text_ok = "X";
        }

        text += "contact_text_ok = " + contact_text_ok + System.lineSeparator();

        String contact_phone;

        if (jTextFieldPhoneNumber.getText().isEmpty()) {
            contact_phone = "X";
        }

        else {
            contact_phone = jTextFieldPhoneNumber.getText();
        }

        text += "contact_phone = " + contact_phone + System.lineSeparator();

        String contact_phone_extension;

        if (jTextFieldExtension.getText().isEmpty()) {
            contact_phone_extension = "X";
        }

        else {
            contact_phone_extension = jTextFieldExtension.getText();
        }

        text += "contact_phone_extension = " + contact_phone_extension + System.lineSeparator();

        String contact_name;

        if (jTextFieldContactName.getText().isEmpty()) {
            contact_name = "X";
        }

        else {
            contact_name = jTextFieldContactName.getText();
        }

        text += "contact_name = " + contact_name + System.lineSeparator();

        String xstreet0;

        if (jTextFieldStreet.getText().isEmpty()) {
            xstreet0 = "X";
        }

        else {
            xstreet0 = jTextFieldStreet.getText();
        }

        text += "xstreet0 = " + xstreet0 + System.lineSeparator();

        String xstreet1;

        if (jTextFieldCrossStreet.getText().isEmpty()) {
            xstreet1 = "X";
        }

        else {
            xstreet1 = jTextFieldCrossStreet.getText();
        }

        text += "xstreet1 = " + xstreet1 + System.lineSeparator();

        String city;

        if (jTextFieldCity.getText().isEmpty()) {
            city = "X";
        }

        else {
            city = jTextFieldCity.getText();
        }

        text += "city = " + city + System.lineSeparator() +
        "region = X" + System.lineSeparator();

        String contact_ok;

        if (jCheckBoxOkForOthers.isSelected()) {
            contact_ok = "1";
        }

        else {
            contact_ok = "X";
        }

        text += "contact_ok = " + contact_ok + System.lineSeparator();

        // The rest is different based on which Type and Category

        if (jComboBoxType.getSelectedIndex() == 0) {

            if (jComboBoxCategory.getSelectedIndex() == 0) {

                String rent;

                if (jTextFieldRent.getText().isEmpty()) {
                    rent = "X";
                }

                else {
                    rent = jTextFieldRent.getText();
                }

                text += "rent = " + rent + System.lineSeparator();

                String ft;

                if (jTextFieldSqft.getText().isEmpty()) {
                    ft = "X";
                }

                else {
                    ft = jTextFieldSqft.getText();
                }

                text += "ft = " + ft + System.lineSeparator();

                String private_room;

                if (jComboBoxPrivateRoom.getSelectedIndex() == 0) {
                    private_room = "0";
                }

                else {
                    private_room = "1";
                }

                text += "private_room = " + private_room + System.lineSeparator();

                String private_bath;

                if (jComboBoxPrivateBath.getSelectedIndex() == 0) {
                    private_bath = "0";
                }

                else {
                    private_bath = "1";
                }

                text += "private_bath = " + private_bath + System.lineSeparator() +
                "housing_type = " + Integer.toString(jComboBoxHousingType.getSelectedIndex() + 1) + System.lineSeparator() +
                "laundry = " + Integer.toString(jComboBoxLaundry.getSelectedIndex() + 1) + System.lineSeparator() +
                "parking = " + Integer.toString(jComboBoxParking.getSelectedIndex() + 1) + System.lineSeparator();

                String pets_cat;

                if (jCheckBoxCats.isSelected()) {
                    pets_cat = "1";
                }

                else {
                    pets_cat = "X";
                }

                text += "pets_cat = " + pets_cat + System.lineSeparator();

                String pets_dog;

                if (jCheckBoxDogs.isSelected()) {
                    pets_dog = "1";
                }

                else {
                    pets_dog = "X";
                }

                text += "pets_dog = " + pets_dog + System.lineSeparator();

                String is_furnished;

                if (jCheckBoxFurnished.isSelected()) {
                    is_furnished = "1";
                }

                else {
                    is_furnished = "X";
                }

                text += "is_furnished = " + is_furnished + System.lineSeparator();

                String no_smoking;

                if (jCheckBoxNoSmoking.isSelected()) {
                    no_smoking = "1";
                }

                else {
                    no_smoking = "X";
                }

                text += "no_smoking = " + no_smoking + System.lineSeparator();

                String wheelchaccess;

                if (jCheckBoxWheelchair.isSelected()) {
                    wheelchaccess = "1";
                }

                else {
                    wheelchaccess = "X";
                }

                text += "wheelchaccess = " + wheelchaccess + System.lineSeparator() +
                "available_month = " + Integer.toString(jComboBoxMonth.getSelectedIndex() + 1) + System.lineSeparator() +
                "available_day = " + Integer.toString(jComboBoxDay.getSelectedIndex() + 1) + System.lineSeparator();

                String available_year;

                if (jTextFieldYear.getText().isEmpty()) {
                    available_year  = "X";
                }

                else {
                    available_year = jTextFieldYear.getText();
                }

                text += "available_year = " + available_year + System.lineSeparator();

            }

            else if (jComboBoxCategory.getSelectedIndex() == 1 ||
                jComboBoxCategory.getSelectedIndex() == 8) {

                String rent;

                if (jTextFieldRent.getText().isEmpty()) {
                    rent = "X";
                }

                else {
                    rent = jTextFieldRent.getText();
                }

                text += "rent = " + rent + System.lineSeparator();

                String ft;

                if (jTextFieldSqft.getText().isEmpty()) {
                    ft = "X";
                }

                else {
                    ft = jTextFieldSqft.getText();
                }

                text += "ft = " + ft + System.lineSeparator() +
                "housing_type = " + Integer.toString(jComboBoxHousingType.getSelectedIndex() + 1) + System.lineSeparator() +
                "laundry = " + Integer.toString(jComboBoxLaundry.getSelectedIndex() + 1) + System.lineSeparator() +
                "parking = " + Integer.toString(jComboBoxParking.getSelectedIndex() + 1) + System.lineSeparator() +
                "bedrooms = " + Integer.toString(jComboBoxBedrooms.getSelectedIndex() + 1) + System.lineSeparator() +
                "bathrooms = " + Integer.toString(jComboBoxBathrooms.getSelectedIndex() + 1) + System.lineSeparator();

                String pets_cat;

                if (jCheckBoxCats.isSelected()) {
                    pets_cat = "1";
                }

                else {
                    pets_cat = "X";
                }

                text += "pets_cat = " + pets_cat + System.lineSeparator();

                String pets_dog;

                if (jCheckBoxDogs.isSelected()) {
                    pets_dog = "1";
                }

                else {
                    pets_dog = "X";
                }

                text += "pets_dog = " + pets_dog + System.lineSeparator();

                String is_furnished;

                if (jCheckBoxFurnished.isSelected()) {
                    is_furnished = "1";
                }

                else {
                    is_furnished = "X";
                }

                text += "is_furnished = " + is_furnished + System.lineSeparator();

                String no_smoking;

                if (jCheckBoxNoSmoking.isSelected()) {
                    no_smoking = "1";
                }

                else {
                    no_smoking = "X";
                }

                text += "no_smoking = " + no_smoking + System.lineSeparator();

                String wheelchaccess;

                if (jCheckBoxWheelchair.isSelected()) {
                    wheelchaccess = "1";
                }

                else {
                    wheelchaccess = "X";
                }

                text += "wheelchaccess = " + wheelchaccess + System.lineSeparator() +
                "available_month = " + Integer.toString(jComboBoxMonth.getSelectedIndex() + 1) + System.lineSeparator() +
                "available_day = " + Integer.toString(jComboBoxDay.getSelectedIndex() + 1) + System.lineSeparator();

                String available_year;

                if (jTextFieldYear.getText().isEmpty()) {
                    available_year  = "X";
                }

                else {
                    available_year = jTextFieldYear.getText();
                }

                text += "available_year = " + available_year + System.lineSeparator();

            }

            else if (jComboBoxCategory.getSelectedIndex() == 2) {

                String ft;

                if (jTextFieldSqft.getText().isEmpty()) {
                    ft = "X";
                }

                else {
                    ft = jTextFieldSqft.getText();
                }

                text += "ft = " + ft + System.lineSeparator() +
                "housing_type = " + Integer.toString(jComboBoxHousingType.getSelectedIndex() + 1) + System.lineSeparator() +
                "laundry = " + Integer.toString(jComboBoxLaundry.getSelectedIndex() + 1) + System.lineSeparator() +
                "parking = " + Integer.toString(jComboBoxParking.getSelectedIndex() + 1) + System.lineSeparator() +
                "bedrooms = " + Integer.toString(jComboBoxBedrooms.getSelectedIndex() + 1) + System.lineSeparator() +
                "bathrooms = " + Integer.toString(jComboBoxBathrooms.getSelectedIndex() + 1) + System.lineSeparator();

                String pets_cat;

                if (jCheckBoxCats.isSelected()) {
                    pets_cat = "1";
                }

                else {
                    pets_cat = "X";
                }

                text += "pets_cat = " + pets_cat + System.lineSeparator();

                String pets_dog;

                if (jCheckBoxDogs.isSelected()) {
                    pets_dog = "1";
                }

                else {
                    pets_dog = "X";
                }

                text += "pets_dog = " + pets_dog + System.lineSeparator();

                String is_furnished;

                if (jCheckBoxFurnished.isSelected()) {
                    is_furnished = "1";
                }

                else {
                    is_furnished = "X";
                }

                text += "is_furnished = " + is_furnished + System.lineSeparator();

                String no_smoking;

                if (jCheckBoxNoSmoking.isSelected()) {
                    no_smoking = "1";
                }

                else {
                    no_smoking = "X";
                }

                text += "no_smoking = " + no_smoking + System.lineSeparator();

                String wheelchaccess;

                if (jCheckBoxWheelchair.isSelected()) {
                    wheelchaccess = "1";
                }

                else {
                    wheelchaccess = "X";
                }

                text += "wheelchaccess = " + wheelchaccess + System.lineSeparator() +
                "available_month = " + Integer.toString(jComboBoxMonth.getSelectedIndex() + 1) + System.lineSeparator() +
                "available_day = " + Integer.toString(jComboBoxDay.getSelectedIndex() + 1) + System.lineSeparator();

                String available_year;

                if (jTextFieldYear.getText().isEmpty()) {
                    available_year  = "X";
                }

                else {
                    available_year = jTextFieldYear.getText();
                }

                text += "available_year = " + available_year + System.lineSeparator();

            }

            else if (jComboBoxCategory.getSelectedIndex() == 3 ||
                jComboBoxCategory.getSelectedIndex() == 4) {

                String rent;

                if (jTextFieldRent.getText().isEmpty()) {
                    rent = "X";
                }

                else {
                    rent = jTextFieldRent.getText();
                }

                text += "rent = " + rent + System.lineSeparator();

                String ft;

                if (jTextFieldSqft.getText().isEmpty()) {
                    ft = "X";
                }

                else {
                    ft = jTextFieldSqft.getText();
                }

                text += "ft = " + ft + System.lineSeparator();

            }

            else if (jComboBoxCategory.getSelectedIndex() == 5 ||
                jComboBoxCategory.getSelectedIndex() == 6) {

                String rent;

                if (jTextFieldRent.getText().isEmpty()) {
                    rent = "X";
                }

                else {
                    rent = jTextFieldRent.getText();
                }

                text += "rent = " + rent + System.lineSeparator();

                String ft;

                if (jTextFieldSqft.getText().isEmpty()) {
                    ft = "X";
                }

                else {
                    ft = jTextFieldSqft.getText();
                }

                text += "ft = " + ft + System.lineSeparator() +
                "housing_type = " + Integer.toString(jComboBoxHousingType.getSelectedIndex() + 1) + System.lineSeparator() +
                "laundry = " + Integer.toString(jComboBoxLaundry.getSelectedIndex() + 1) + System.lineSeparator() +
                "parking = " + Integer.toString(jComboBoxParking.getSelectedIndex() + 1) + System.lineSeparator() +
                "bedrooms = " + Integer.toString(jComboBoxBedrooms.getSelectedIndex() + 1) + System.lineSeparator() +
                "bathrooms = " + Integer.toString(jComboBoxBathrooms.getSelectedIndex() + 1) + System.lineSeparator();

                String is_furnished;

                if (jCheckBoxFurnished.isSelected()) {
                    is_furnished = "1";
                }

                else {
                    is_furnished = "X";
                }

                text += "is_furnished = " + is_furnished + System.lineSeparator();

                String no_smoking;

                if (jCheckBoxNoSmoking.isSelected()) {
                    no_smoking = "1";
                }

                else {
                    no_smoking = "X";
                }

                text += "no_smoking = " + no_smoking + System.lineSeparator();

                String wheelchaccess;

                if (jCheckBoxWheelchair.isSelected()) {
                    wheelchaccess = "1";
                }

                else {
                    wheelchaccess = "X";
                }

                text += "wheelchaccess = " + wheelchaccess + System.lineSeparator() +
                "available_month = " + Integer.toString(jComboBoxMonth.getSelectedIndex() + 1) + System.lineSeparator() +
                "available_day = " + Integer.toString(jComboBoxDay.getSelectedIndex() + 1) + System.lineSeparator();

                String available_year;

                if (jTextFieldYear.getText().isEmpty()) {
                    available_year  = "X";
                }

                else {
                    available_year = jTextFieldYear.getText();
                }

                text += "available_year = " + available_year + System.lineSeparator();

                if (jComboBoxCategory.getSelectedIndex() == 6) {

                    String has_license;

                    if (jRadioButtonUnlicensed.isSelected()) {
                        has_license = "X";
                        text += "has_license = " + has_license + System.lineSeparator() +
                        "license_info = X";
                    }

                    else {

                        has_license = "1";
                        text += "has_license = " + has_license + System.lineSeparator();

                        String license_info;

                        if (jTextFieldLicensureInformation.getText().isEmpty()) {
                            license_info = "X";
                        }

                        else {
                            license_info = jTextFieldLicensureInformation.getText();
                        }

                        text += "license_info = " + license_info;

                    }

                }

            }

            else if (jComboBoxCategory.getSelectedIndex() == 7) {

                String rent;

                if (jTextFieldRent.getText().isEmpty()) {
                    rent = "X";
                }

                else {
                    rent = jTextFieldRent.getText();
                }

                text += "rent = " + rent + System.lineSeparator();

                String ft;

                if (jTextFieldSqft.getText().isEmpty()) {
                    ft = "X";
                }

                else {
                    ft = jTextFieldSqft.getText();
                }

                text += "ft = " + ft + System.lineSeparator();

                String private_room;

                if (jComboBoxPrivateRoom.getSelectedIndex() == 0) {
                    private_room = "0";
                }

                else {
                    private_room = "1";
                }

                text += "private_room = " + private_room + System.lineSeparator();

                String private_bath;

                if (jComboBoxPrivateBath.getSelectedIndex() == 0) {
                    private_bath = "0";
                }

                else {
                    private_bath = "1";
                }

                text += "private_bath = " + private_bath + System.lineSeparator() +
                "housing_type = " + Integer.toString(jComboBoxHousingType.getSelectedIndex() + 1) + System.lineSeparator() +
                "laundry = " + Integer.toString(jComboBoxLaundry.getSelectedIndex() + 1) + System.lineSeparator() +
                "parking = " + Integer.toString(jComboBoxParking.getSelectedIndex() + 1) + System.lineSeparator() +
                "bedrooms = " + Integer.toString(jComboBoxBedrooms.getSelectedIndex() + 1) + System.lineSeparator() +
                "bathrooms = " + Integer.toString(jComboBoxBathrooms.getSelectedIndex() + 1) + System.lineSeparator();

                String pets_cat;

                if (jCheckBoxCats.isSelected()) {
                    pets_cat = "1";
                }

                else {
                    pets_cat = "X";
                }

                text += "pets_cat = " + pets_cat + System.lineSeparator();

                String pets_dog;

                if (jCheckBoxDogs.isSelected()) {
                    pets_dog = "1";
                }

                else {
                    pets_dog = "X";
                }

                text += "pets_dog = " + pets_dog + System.lineSeparator();

                String is_furnished;

                if (jCheckBoxFurnished.isSelected()) {
                    is_furnished = "1";
                }

                else {
                    is_furnished = "X";
                }

                text += "is_furnished = " + is_furnished + System.lineSeparator();

                String no_smoking;

                if (jCheckBoxNoSmoking.isSelected()) {
                    no_smoking = "1";
                }

                else {
                    no_smoking = "X";
                }

                text += "no_smoking = " + no_smoking + System.lineSeparator();

                String wheelchaccess;

                if (jCheckBoxWheelchair.isSelected()) {
                    wheelchaccess = "1";
                }

                else {
                    wheelchaccess = "X";
                }

                text += "wheelchaccess = " + wheelchaccess + System.lineSeparator() +
                "available_month = " + Integer.toString(jComboBoxMonth.getSelectedIndex() + 1) + System.lineSeparator() +
                "available_day = " + Integer.toString(jComboBoxDay.getSelectedIndex() + 1) + System.lineSeparator();

                String available_year;

                if (jTextFieldYear.getText().isEmpty()) {
                    available_year  = "X";
                }

                else {
                    available_year = jTextFieldYear.getText();
                }

                text += "available_year = " + available_year + System.lineSeparator();

            }

        }

        counter = 1;

        try{

            File file = new File("." + System.getProperty("file.separator") + "Images");
            if (!file.exists()) {
                file.mkdir();
            }

            file = new File("." + System.getProperty("file.separator") + "Information");
            if (!file.exists()) {
                file.mkdir();
            }

            else {
                while (new File("." + System.getProperty("file.separator") + "Information" + System.getProperty("file.separator") + Integer.toString(counter) + ".txt").exists()) {
                    counter++;
                }
            }

            Files.write(Paths.get("." + System.getProperty("file.separator") + "Information" + System.getProperty("file.separator") + Integer.toString(counter) + ".txt"), text.getBytes());
            jLabelResult.setText("Created file " + Integer.toString(counter) + ".txt" + " successfully!");
            jLabelResult.setVisible(true);
        } catch (IOException x) {
            jLabelResult.setText("Something went wrong when trying to create " + Integer.toString(counter) + ".txt");
            jLabelResult.setVisible(true);
            System.err.println(x);
        }

        File[] files = jFileChooserImages.getSelectedFiles();

        for (int i = 0; i < files.length; i++) {
            try {
                FileHandler.copy(files[i], new File("." + System.getProperty("file.separator") + "Images" + System.getProperty("file.separator") + Integer.toString(counter) + "-" + Integer.toString(i + 1) + files[i].getName().substring(files[i].getName().lastIndexOf("."))));
            } catch (IOException ex) {
                System.out.println("Failed");
            }
        }

    }//GEN-LAST:event_jButtonGenerateActionPerformed

    private void jTextFieldCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCityActionPerformed

    private void jComboBoxPrivateBathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPrivateBathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxPrivateBathActionPerformed

    private void jComboBoxMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxMonthActionPerformed
        // TODO add your handling code here:
        switch (jComboBoxMonth.getSelectedIndex()) {
            case 0: jComboBoxDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
            jComboBoxDay.setSelectedIndex(0);
            break;

            case 1: jComboBoxDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28" }));
            jComboBoxDay.setSelectedIndex(0);
            break;

            case 2: jComboBoxDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30" }));
            jComboBoxDay.setSelectedIndex(0);
            break;

            case 3: jComboBoxDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30" }));
            jComboBoxDay.setSelectedIndex(0);
            break;

            case 4: jComboBoxDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
            jComboBoxDay.setSelectedIndex(0);
            break;

            case 5: jComboBoxDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30" }));
            jComboBoxDay.setSelectedIndex(0);
            break;

            case 6: jComboBoxDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
            jComboBoxDay.setSelectedIndex(0);
            break;

            case 7: jComboBoxDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
            jComboBoxDay.setSelectedIndex(0);
            break;

            case 8: jComboBoxDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30" }));
            jComboBoxDay.setSelectedIndex(0);
            break;

            case 9: jComboBoxDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
            jComboBoxDay.setSelectedIndex(0);
            break;

            case 10: jComboBoxDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30" }));
            jComboBoxDay.setSelectedIndex(0);
            break;

            case 11: jComboBoxDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
            jComboBoxDay.setSelectedIndex(0);
            break;

            default: break;
        }
    }//GEN-LAST:event_jComboBoxMonthActionPerformed

    private void jButtonImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImagesActionPerformed
        // TODO add your handling code here:
        jFileChooserImages.setSelectedFile(new File(""));
        jFileChooserImages.setCurrentDirectory(new File("."));
        jFileChooserImages.showOpenDialog(NewJFrame.this);
    }//GEN-LAST:event_jButtonImagesActionPerformed

    private void jTextFieldRentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldRentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldRentActionPerformed

    private void jComboBoxCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCategoryActionPerformed
        // TODO add your handling code here:
        switch (jComboBoxCategory.getSelectedIndex()) {
            case 0: jComboBoxHousingType.setEnabled(true);
            jComboBoxLaundry.setEnabled(true);
            jComboBoxParking.setEnabled(true);

            jCheckBoxCats.setEnabled(true);
            jCheckBoxDogs.setEnabled(true);
            jCheckBoxFurnished.setEnabled(true);
            jCheckBoxNoSmoking.setEnabled(true);
            jCheckBoxWheelchair.setEnabled(true);

            jComboBoxMonth.setEnabled(true);
            jComboBoxDay.setEnabled(true);
            jTextFieldYear.setEnabled(true);

            jComboBoxBathrooms.setEnabled(false);
            jComboBoxBedrooms.setEnabled(false);
            jComboBoxPrivateBath.setEnabled(true);
            jComboBoxPrivateRoom.setEnabled(true);

            jTextFieldRent.setEnabled(true);

            jRadioButtonUnlicensed.setEnabled(false);
            jRadioButtonLicensed.setEnabled(false);
            jTextFieldLicensureInformation.setEnabled(false);

            break;

            case 1: jComboBoxHousingType.setEnabled(true);
            jComboBoxLaundry.setEnabled(true);
            jComboBoxParking.setEnabled(true);

            jCheckBoxCats.setEnabled(true);
            jCheckBoxDogs.setEnabled(true);
            jCheckBoxFurnished.setEnabled(true);
            jCheckBoxNoSmoking.setEnabled(true);
            jCheckBoxWheelchair.setEnabled(true);

            jComboBoxMonth.setEnabled(true);
            jComboBoxDay.setEnabled(true);
            jTextFieldYear.setEnabled(true);

            jComboBoxBathrooms.setEnabled(true);
            jComboBoxBedrooms.setEnabled(true);
            jComboBoxPrivateBath.setEnabled(false);
            jComboBoxPrivateRoom.setEnabled(false);

            jTextFieldRent.setEnabled(true);

            jRadioButtonUnlicensed.setEnabled(false);
            jRadioButtonLicensed.setEnabled(false);
            jTextFieldLicensureInformation.setEnabled(false);

            break;

            case 2: jComboBoxHousingType.setEnabled(true);
            jComboBoxLaundry.setEnabled(true);
            jComboBoxParking.setEnabled(true);

            jCheckBoxCats.setEnabled(true);
            jCheckBoxDogs.setEnabled(true);
            jCheckBoxFurnished.setEnabled(true);
            jCheckBoxNoSmoking.setEnabled(true);
            jCheckBoxWheelchair.setEnabled(true);

            jComboBoxMonth.setEnabled(true);
            jComboBoxDay.setEnabled(true);
            jTextFieldYear.setEnabled(true);

            jComboBoxBathrooms.setEnabled(true);
            jComboBoxBedrooms.setEnabled(true);
            jComboBoxPrivateBath.setEnabled(false);
            jComboBoxPrivateRoom.setEnabled(false);

            jTextFieldRent.setEnabled(false);

            jRadioButtonUnlicensed.setEnabled(false);
            jRadioButtonLicensed.setEnabled(false);
            jTextFieldLicensureInformation.setEnabled(false);

            break;

            case 3: jComboBoxHousingType.setEnabled(false);
            jComboBoxLaundry.setEnabled(false);
            jComboBoxParking.setEnabled(false);

            jCheckBoxCats.setEnabled(false);
            jCheckBoxDogs.setEnabled(false);
            jCheckBoxFurnished.setEnabled(false);
            jCheckBoxNoSmoking.setEnabled(false);
            jCheckBoxWheelchair.setEnabled(false);

            jComboBoxMonth.setEnabled(false);
            jComboBoxDay.setEnabled(false);
            jTextFieldYear.setEnabled(false);

            jComboBoxBathrooms.setEnabled(false);
            jComboBoxBedrooms.setEnabled(false);
            jComboBoxPrivateBath.setEnabled(false);
            jComboBoxPrivateRoom.setEnabled(false);

            jTextFieldRent.setEnabled(true);

            jRadioButtonUnlicensed.setEnabled(false);
            jRadioButtonLicensed.setEnabled(false);
            jTextFieldLicensureInformation.setEnabled(false);

            break;

            case 4: jComboBoxHousingType.setEnabled(false);
            jComboBoxLaundry.setEnabled(false);
            jComboBoxParking.setEnabled(false);

            jCheckBoxCats.setEnabled(false);
            jCheckBoxDogs.setEnabled(false);
            jCheckBoxFurnished.setEnabled(false);
            jCheckBoxNoSmoking.setEnabled(false);
            jCheckBoxWheelchair.setEnabled(false);

            jComboBoxMonth.setEnabled(false);
            jComboBoxDay.setEnabled(false);
            jTextFieldYear.setEnabled(false);

            jComboBoxBathrooms.setEnabled(false);
            jComboBoxBedrooms.setEnabled(false);
            jComboBoxPrivateBath.setEnabled(false);
            jComboBoxPrivateRoom.setEnabled(false);

            jTextFieldRent.setEnabled(true);

            jRadioButtonUnlicensed.setEnabled(false);
            jRadioButtonLicensed.setEnabled(false);
            jTextFieldLicensureInformation.setEnabled(false);

            break;

            case 5: jComboBoxHousingType.setEnabled(true);
            jComboBoxLaundry.setEnabled(true);
            jComboBoxParking.setEnabled(true);

            jCheckBoxCats.setEnabled(false);
            jCheckBoxDogs.setEnabled(false);
            jCheckBoxFurnished.setEnabled(true);
            jCheckBoxNoSmoking.setEnabled(true);
            jCheckBoxWheelchair.setEnabled(true);

            jComboBoxMonth.setEnabled(true);
            jComboBoxDay.setEnabled(true);
            jTextFieldYear.setEnabled(true);

            jComboBoxBathrooms.setEnabled(true);
            jComboBoxBedrooms.setEnabled(true);
            jComboBoxPrivateBath.setEnabled(false);
            jComboBoxPrivateRoom.setEnabled(false);

            jTextFieldRent.setEnabled(true);

            jRadioButtonUnlicensed.setEnabled(true);
            jRadioButtonLicensed.setEnabled(true);
            jTextFieldLicensureInformation.setEnabled(true);

            break;

            case 6: jComboBoxHousingType.setEnabled(true);
            jComboBoxLaundry.setEnabled(true);
            jComboBoxParking.setEnabled(true);

            jCheckBoxCats.setEnabled(false);
            jCheckBoxDogs.setEnabled(false);
            jCheckBoxFurnished.setEnabled(true);
            jCheckBoxNoSmoking.setEnabled(true);
            jCheckBoxWheelchair.setEnabled(true);

            jComboBoxMonth.setEnabled(true);
            jComboBoxDay.setEnabled(true);
            jTextFieldYear.setEnabled(true);

            jComboBoxBathrooms.setEnabled(true);
            jComboBoxBedrooms.setEnabled(true);
            jComboBoxPrivateBath.setEnabled(false);
            jComboBoxPrivateRoom.setEnabled(false);

            jTextFieldRent.setEnabled(true);

            jRadioButtonUnlicensed.setEnabled(false);
            jRadioButtonLicensed.setEnabled(false);
            jTextFieldLicensureInformation.setEnabled(false);

            break;

            case 7: jComboBoxHousingType.setEnabled(true);
            jComboBoxLaundry.setEnabled(true);
            jComboBoxParking.setEnabled(true);

            jCheckBoxCats.setEnabled(true);
            jCheckBoxDogs.setEnabled(true);
            jCheckBoxFurnished.setEnabled(true);
            jCheckBoxNoSmoking.setEnabled(true);
            jCheckBoxWheelchair.setEnabled(true);

            jComboBoxMonth.setEnabled(true);
            jComboBoxDay.setEnabled(true);
            jTextFieldYear.setEnabled(true);

            jComboBoxBathrooms.setEnabled(true);
            jComboBoxBedrooms.setEnabled(true);
            jComboBoxPrivateBath.setEnabled(true);
            jComboBoxPrivateRoom.setEnabled(true);

            jTextFieldRent.setEnabled(true);

            jRadioButtonUnlicensed.setEnabled(false);
            jRadioButtonLicensed.setEnabled(false);
            jTextFieldLicensureInformation.setEnabled(false);

            break;

            case 8: jComboBoxHousingType.setEnabled(true);
            jComboBoxLaundry.setEnabled(true);
            jComboBoxParking.setEnabled(true);

            jCheckBoxCats.setEnabled(true);
            jCheckBoxDogs.setEnabled(true);
            jCheckBoxFurnished.setEnabled(true);
            jCheckBoxNoSmoking.setEnabled(true);
            jCheckBoxWheelchair.setEnabled(true);

            jComboBoxMonth.setEnabled(true);
            jComboBoxDay.setEnabled(true);
            jTextFieldYear.setEnabled(true);

            jComboBoxBathrooms.setEnabled(true);
            jComboBoxBedrooms.setEnabled(true);
            jComboBoxPrivateBath.setEnabled(false);
            jComboBoxPrivateRoom.setEnabled(false);

            jTextFieldRent.setEnabled(true);

            jRadioButtonUnlicensed.setEnabled(false);
            jRadioButtonLicensed.setEnabled(false);
            jTextFieldLicensureInformation.setEnabled(false);

            break;

            default: break;
        }
    }//GEN-LAST:event_jComboBoxCategoryActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        // TODO add your handling code here:
        if (jComboBoxType.getSelectedIndex() == 0) {
            jComboBoxCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "rooms & shares", "apts/housing for rent", "housing swap", "office & commercial", "parking & storage", "real estate - by broker", "real estate - by owner", "sublets & temporary", "vacation rentals" }));
        }
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jComboBoxLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxLocationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxLocationActionPerformed

    private void jTextFieldPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPasswordActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupEmail;
    private javax.swing.ButtonGroup buttonGroupLicense;
    private javax.swing.JButton jButtonConfirm;
    private javax.swing.JButton jButtonGenerate;
    private javax.swing.JButton jButtonImages;
    private javax.swing.JButton jButtonSchedule;
    private javax.swing.JCheckBox jCheckBoxByPhone;
    private javax.swing.JCheckBox jCheckBoxByText;
    private javax.swing.JCheckBox jCheckBoxCats;
    private javax.swing.JCheckBox jCheckBoxDogs;
    private javax.swing.JCheckBox jCheckBoxFurnished;
    private javax.swing.JCheckBox jCheckBoxNoSmoking;
    private javax.swing.JCheckBox jCheckBoxOkForOthers;
    private javax.swing.JCheckBox jCheckBoxWheelchair;
    private javax.swing.JComboBox<String> jComboBoxArea;
    private javax.swing.JComboBox<String> jComboBoxBathrooms;
    private javax.swing.JComboBox<String> jComboBoxBedrooms;
    private javax.swing.JComboBox<String> jComboBoxCategory;
    private javax.swing.JComboBox<String> jComboBoxDay;
    private javax.swing.JComboBox<String> jComboBoxHousingType;
    private javax.swing.JComboBox<String> jComboBoxLaundry;
    private javax.swing.JComboBox<String> jComboBoxLocation;
    private javax.swing.JComboBox<String> jComboBoxMonth;
    private javax.swing.JComboBox<String> jComboBoxParking;
    private javax.swing.JComboBox<String> jComboBoxPrivateBath;
    private javax.swing.JComboBox<String> jComboBoxPrivateRoom;
    private javax.swing.JComboBox<String> jComboBoxType;
    private javax.swing.JDialog jDialogSchedule;
    private javax.swing.JFileChooser jFileChooserImages;
    private javax.swing.JFrame jFrameConsole;
    private javax.swing.JLabel jLabelArea;
    private javax.swing.JLabel jLabelAvailableOn;
    private javax.swing.JLabel jLabelBathrooms;
    private javax.swing.JLabel jLabelBedrooms;
    private javax.swing.JLabel jLabelCategory;
    private javax.swing.JLabel jLabelCity;
    private javax.swing.JLabel jLabelContactInfo;
    private javax.swing.JLabel jLabelContactName;
    private javax.swing.JLabel jLabelCrossStreet;
    private javax.swing.JLabel jLabelDay;
    private javax.swing.JLabel jLabelEmailPrivacyOptions;
    private javax.swing.JLabel jLabelExtension;
    private javax.swing.JLabel jLabelHousingType;
    private javax.swing.JLabel jLabelLaundry;
    private javax.swing.JLabel jLabelLicensureInformation;
    private javax.swing.JLabel jLabelLocation;
    private javax.swing.JLabel jLabelLocationInfo;
    private javax.swing.JLabel jLabelMonth;
    private javax.swing.JLabel jLabelNumberOfImages;
    private javax.swing.JLabel jLabelParking;
    private javax.swing.JLabel jLabelPassword;
    private javax.swing.JLabel jLabelPhoneNumber;
    private javax.swing.JLabel jLabelPostalCode;
    private javax.swing.JLabel jLabelPostingBody;
    private javax.swing.JLabel jLabelPostingDetails;
    private javax.swing.JLabel jLabelPostingTitle;
    private javax.swing.JLabel jLabelPrivateBath;
    private javax.swing.JLabel jLabelPrivateRoom;
    private javax.swing.JLabel jLabelRent;
    private javax.swing.JLabel jLabelResult;
    private javax.swing.JLabel jLabelSchedule;
    private javax.swing.JLabel jLabelSpecificLocation;
    private javax.swing.JLabel jLabelSqft;
    private javax.swing.JLabel jLabelStreet;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JLabel jLabelUsername;
    private javax.swing.JLabel jLabelUsersCanAlsoContactMe;
    private javax.swing.JLabel jLabelYear;
    private javax.swing.JPanel jPanelProgram;
    private javax.swing.JRadioButton jRadioButton1CLMailRelay;
    private javax.swing.JRadioButton jRadioButton2ShowMyReal;
    private javax.swing.JRadioButton jRadioButton3NoReplies;
    private javax.swing.JRadioButton jRadioButtonLicensed;
    private javax.swing.JRadioButton jRadioButtonUnlicensed;
    private javax.swing.JScrollPane jScrollPaneConsole;
    private javax.swing.JScrollPane jScrollPanePostingBody;
    private javax.swing.JScrollPane jScrollPaneProgram;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSpinner jSpinnerSchedule;
    private javax.swing.JTextArea jTextAreaConsole;
    private javax.swing.JTextArea jTextAreaPostingBody;
    private javax.swing.JTextField jTextFieldCity;
    private javax.swing.JTextField jTextFieldContactName;
    private javax.swing.JTextField jTextFieldCrossStreet;
    private javax.swing.JTextField jTextFieldExtension;
    private javax.swing.JTextField jTextFieldLicensureInformation;
    private javax.swing.JTextField jTextFieldPassword;
    private javax.swing.JTextField jTextFieldPhoneNumber;
    private javax.swing.JTextField jTextFieldPostalCode;
    private javax.swing.JTextField jTextFieldPostingTitle;
    private javax.swing.JTextField jTextFieldRent;
    private javax.swing.JTextField jTextFieldSpecificLocation;
    private javax.swing.JTextField jTextFieldSqft;
    private javax.swing.JTextField jTextFieldStreet;
    private javax.swing.JTextField jTextFieldUsername;
    private javax.swing.JTextField jTextFieldYear;
    // End of variables declaration//GEN-END:variables
}
